#!/bin/bash

## Default controller values
DEFAULT_BRIGHTNESS_CONTROLLER="light"
DEFAULT_INCREASE_FLAG="-A"
DEFAULT_DECREASE_FLAG="-U"
DEFAULT_SET_BRIGHTNESS_FLAG="-S"
DEFAULT_GET_BRIGHTNESS_FLAG="-G"
DEFAULT_ADDITIONAL_FLAGS=()


## Default values
DEFAULT_NOTIFICATION_ENABLED=1
DEFAULT_NOTIFICATION_TIMEOUT=3000

DEFAULT_NORMAL_DELTA=5
DEFAULT_BIG_DELTA=10
DEFAULT_BRIGTHNESS_MAX=100
DEFAULT_BRIGTHNESS_MIN=0.1

VERBOSE=0

CONFIG_PATH="${XDG_CONFIG_HOME:-$HOME/.config}/brightctl/config.ini"
READ_INI_POSSIBLE_PATHS=(\
    "${XDG_LIB_HOME:-$HOME/.local/lib}/read_ini.sh"  "${XDG_LIB_HOME:-$HOME/.local/lib}/bash_ini_parser/read_ini.sh" \
    "./read_ini.sh" "./bash_ini_parser/read_ini.sh" \
    "./lib/read_ini.sh" "./lib/bash_ini_parser/read_ini.sh" \
)

## Args
OPTIONAL_FLAGS=( \
    "-v" "--verbose" \
    "-c" "--config" \
    "-h" "-?" "--help" \
)

verbose () {
    [[ $VERBOSE -eq 1 ]] && return 0 || return 1
}

get_parser_location () {
    local parser_location=""
    for location in "${READ_INI_POSSIBLE_PATHS[@]}"; do
        [[ -f "$location" ]] && parser_location="$location" && break
    done

    echo "$parser_location"
}

checkout_config () {
    local parser_location="$(get_parser_location)"

    [[ -z "$parser_location" ]] && verbose && echo "Unable to find the 'read_ini.sh' file, which is used to read the config file. Will be using the default vlaues of the script." && return 0

    verbose && echo "Sourcing the ini parser"
    source "$parser_location"

    verbose && echo "Reading the config file"
    read_ini "$CONFIG_PATH"

    BRIGHTNESS_CONTROLLER=${INI__Controller__brightness_controller:-$DEFAULT_BRIGHTNESS_CONTROLLER}
    INCREASE_FLAG=${INI__Controller__increase_flag:-$DEFAULT_INCREASE_FLAG}
    DECREASE_FLAG=${INI__Controller__decrease_flag:-$DEFAULT_DECREASE_FLAG}
    SET_BRIGHTNESS_FLAG=${INI__Controller__set_brightness_flag:-$DEFAULT_SET_BRIGHTNESS_FLAG}
    GET_BRIGHTNESS_FLAG=${INI__Controller__get_brightness_flag:-$DEFAULT_GET_BRIGHTNESS_FLAG}
    ADDITIONAL_FLAGS=${INI__Controller__additional_flags:-$DEFAULT_ADDITIONAL_FLAGS}

    NORMAL_DELTA=${INI__Controller__normal_delta:-$DEFAULT_NORMAL_DELTA}
    BIG_DELTA=${INI__Controller__big_delta:-$DEFAULT_BIG_DELTA}
    BRIGTHNESS_MAX=${INI__Controller__brigthness_max:-$DEFAULT_BRIGTHNESS_MAX}
    BRIGTHNESS_MIN=${INI__Controller__brigthness_min:-$DEFAULT_BRIGTHNESS_MIN}

    NOTIFICATION_ENABLED=${INI__Notification__enabled:-$DEFAULT_NOTIFICATION_ENABLED}
    NOTIFICATION_TIMEOUT=${INI__Notification__timeout:-$DEFAULT_NOTIFICATION_TIMEOUT}

    verbose && echo "" && echo "After parsing the config file, variables are:" && \
    echo "BRIGHTNESS_CONTROLLER: '$BRIGHTNESS_CONTROLLER'" && \
    echo "INCREASE_FLAG: '$INCREASE_FLAG'" && \
    echo "DECREASE_FLAG: '$DECREASE_FLAG'" && \
    echo "SET_BRIGHTNESS_FLAG: '$SET_BRIGHTNESS_FLAG'" && \
    echo "GET_BRIGHTNESS_FLAG: '$GET_BRIGHTNESS_FLAG'" && \
    echo "ADDITIONAL_FLAGS: '$ADDITIONAL_FLAGS'" && \
    echo "NORMAL_DELTA: '$NORMAL_DELTA'" && \
    echo "BIG_DELTA: '$BIG_DELTA'" && \
    echo "BRIGTHNESS_MAX: '$BRIGTHNESS_MAX'" && \
    echo "BRIGTHNESS_MIN: '$BRIGTHNESS_MIN'" && \
    echo "NOTIFICATION_ENABLED: '$NOTIFICATION_ENABLED'" && \
    echo "NOTIFICATION_TIMEOUT: '$NOTIFICATION_TIMEOUT'" && \
    echo ""

}

notify () {
    local brightness=$(get_brightness | sed 's/\..*$//')
    local cmd="dunstify -h int:value:$brightness -t $NOTIFICATION_TIMEOUT -h string:x-dunst-stack-tag:volume -i \"xfpm-brightness-lcd\" \"Brightness ($brightness%)\""
    [[ $NOTIFICATION_ENABLED -eq 1 ]] && sh -c "$cmd"
    verbose && ( [[ $NOTIFICATION_ENABLED -eq 1 ]] && echo "Notified with \`$cmd\`" || echo "Didn't notify" )
}

brightness_up_by () {
    local cmd="$BRIGHTNESS_CONTROLLER ${ADDITIONAL_FLAGS[@]} $INCREASE_FLAG $1"

    verbose && echo "Increasing brightness by $1, with \`$cmd\`"

    verbose && echo "Brightness before command: $(get_brightness)"
    sh -c "$cmd"
    verbose && echo "Brightness after command: $(get_brightness)"

    notify
}

brightness_down_by () {
    local cmd="$BRIGHTNESS_CONTROLLER ${ADDITIONAL_FLAGS[@]} $DECREASE_FLAG $1"

    verbose && echo "Decreasing brightness by $1, with \`$cmd\`"

    verbose && echo "Brightness before command: $(get_brightness)"
    sh -c "$cmd"
    verbose && echo "Brightness after command: $(get_brightness)"

    notify
}

brightness_set () {
    local cmd="$BRIGHTNESS_CONTROLLER ${ADDITIONAL_FLAGS[@]} $SET_BRIGHTNESS_FLAG $1"
    verbose && echo "Setting the brightness to $1, with \`$cmd\`"
   
    verbose && echo "Brightness before command: $(get_volume)"
    sh -c "$cmd"
    verbose && echo "Brightness after command: $(get_volume)"

    notify
}

brightness_up () {
    local cmd="brightness_up_by $NORMAL_DELTA"
    verbose && echo "Increasing the volume, with \`$cmd\`"
    $cmd
}

brightness_down () {
    local cmd="brightness_down_by $NORMAL_DELTA"
    verbose && echo "Increasing the volume, with \`$cmd\`"
    $cmd
}

brightness_big_up () {
    local cmd="brightness_up_by $BIG_DELTA"
    verbose && echo "Increasing the volume, with \`$cmd\`"
    $cmd
}

brightness_big_down () {
    local cmd="brightness_down_by $BIG_DELTA"
    verbose && echo "Increasing the volume, with \`$cmd\`"
    $cmd
}

get_brightness () {
    sh -c "$BRIGHTNESS_CONTROLLER ${ADDITIONAL_FLAGS[@]} $GET_VOLUME_FLAG"
}


usage() {
    cat << EOF
volumectl - A configurable bash script that makes your life easier in controlling the brightness of your screen and 
notifying it at the same time.

Usage:  brightctl [-v|--verbose] [-c|--config path] [-n|-N] -option [arg]      

Options:
    -i [arg], --increase [arg]          increase the brightness by the "normal" amount or by the [arg] amount
    -d [arg], --decrease [arg]          decrease the brightness by the "normal" amount or by the [arg] amount
    -I, --big-increase                  increase the brightness by the "big" amount
    -D, --big-decrease                  decrease the brightness by the "big" amount
    -s arg, --set arg                   set brightness to arg
    --set-min-brightness                set brightness to minimum
    --set-max-brightness                set brightness to maximum

Optional arguments:
    -c path, --config path              instead of reading from the default location ($CONFIG_PATH),
                                        read from the path given
    -v, --verbose                       print each step the script passes through
    -h, -?, --help                      show this message
EOF
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then #if '__name__' == '__main__'
    
    while [[ " ${OPTIONAL_FLAGS[@]} " =~ " $1 " ]]; do
        verbose && echo "Checking for optional arguments"

        case $1 in 
            -v|--verbose)
                VERBOSE=1
                echo "Setting \$VERBOSE to true (\$VERBOSE=$VERBOSE)"
                shift
                ;;
            -c|--config)
                [[ -f "$2" ]] && CONFIG_PATH="$2" || echo "Error: the config file given '$2' doesn't exists." 1>&2 && exit 1
                verbose && echo "Setting \$CONFIG_PATH to $2 (\$CONFIG_PATH=$CONFIG_PATH)"
                shift 2
                ;;
            -h|-\?|--help)
                verbose && echo "Detected -h, -? or --help"
                usage
                shift
                ;;
        esac
    done

    checkout_config

    verbose && echo "Looking at the argument '$@'"
    case $1 in 
        -i|--increase) 
            verbose && echo "Detected -i or --increase, with argument '$2'"
            [[ -z "$2" ]] && brightness_up || brightness_up_by $2
            ;;
        -I|--big-increase) 
            verbose && echo "Detected -I or --big-increase"
            brightness_big_up
            ;;
        -d|--decrease) 
            verbose && echo "Detected -d or --decrease, with argument '$2'"
            [[ -z "$2" ]] && brightness_down || brightness_down_by $2
            ;;
        -D|--big-decrease) 
            verbose && echo "Detected -D or --big-decrease"
            brightness_big_down
            ;;
        -s|--set-brightness)
            verbose && echo "Detected -s or --set-brightness, with argument '$2'"
            [[ -z "$2" ]] && echo "Error, missing value to set brightness" 1>&2 && exit 1 || brightness_set $2
            ;;
        --set-min-brightness)
            verbose && echo "Detected --set-min-brightness"
            brightness_set $BRIGTHNESS_MIN
            ;;
        --set-max-brightness)
            verbose && echo "Detected --set-min-brightness"
            brightness_set $BRIGTHNESS_MAX
            ;;
        -g|--get-brightness) 
            verbose && echo "Detected -g or --get-brightness"
            get_brightness
            ;;
        "")
            usage
            ;;
        *)
            echo "Unrecognized '$1' flag or argument"
            echo "Try 'volumectl -h' for more information"
            ;;
    esac
fi
